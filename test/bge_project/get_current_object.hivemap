Hivemap (
  hives = HiveNodeArray (
  ),
  bees = BeeNodeArray (
    BeeNode (
      identifier = 'output_0',
      import_path = 'hive.output',
      position = Coordinate2D (
        x = -16.0,
        y = -262.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
    ),
    BeeNode (
      identifier = 'object',
      import_path = 'hive.attribute',
      position = Coordinate2D (
        x = -299.0,
        y = -314.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('KX_GameObject',)",
        ),
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'start_value',
          data_type = 'NoneType',
          value = 'None',
        ),
        InstanceParameter (
          identifier = 'export',
          data_type = 'bool',
          value = 'False',
        ),
      ),
      folded_pins = StringArray (
      ),
    ),
    BeeNode (
      identifier = 'pull_out_0',
      import_path = 'hive.pull_out',
      position = Coordinate2D (
        x = -345.0,
        y = -273.0,
      ),
      meta_args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'data_type',
          data_type = 'tuple',
          value = "('KX_GameObject',)",
        ),
        InstanceParameter (
          identifier = 'attribute_name',
          data_type = 'str',
          value = 'object',
        ),
      ),
      args = InstanceParameterArray (
      ),
      folded_pins = StringArray (
      ),
    ),
    BeeNode (
      identifier = 'modifier_0',
      import_path = 'hive.modifier',
      position = Coordinate2D (
        x = -215.0,
        y = -240.0,
      ),
      meta_args = InstanceParameterArray (
      ),
      args = InstanceParameterArray (
        InstanceParameter (
          identifier = 'code',
          data_type = 'str',
          value = 'import bge\nself._object = bge.logic.getCurrentController().owner',
        ),
      ),
      folded_pins = StringArray (
      ),
    ),
  ),
  helpers = HelperNodeArray (
  ),
  connections = ConnectionArray (
    Connection (
      from_node = 'pull_out_0',
      output_name = 'value',
      to_node = 'output_0',
      input_name = 'output',
      is_trigger = False,
    ),
    Connection (
      from_node = 'pull_out_0',
      output_name = 'pre_output',
      to_node = 'modifier_0',
      input_name = 'trigger',
      is_trigger = True,
    ),
  ),
  docstring = '',
)